//@version=5
strategy(title='EMA&VWAP&MACD close', process_orders_on_close=true, overlay=true, default_qty_type=strategy.cash, default_qty_value=10000)

calc_perc_change(current, last) =>
    (current - last) / last * 100

// roundn rounds the values in its first argument to the specified number of decimal places.
roundn(x, n) =>
    mult = 1
    if n != 0
        for i = 1 to math.abs(n) by 1
            mult *= 10
            mult

    n >= 0 ? math.round(x * mult) / mult : math.round(x / mult) * mult


// Configure backtest start date with inputs
startDate = input.int(title='Start Date', defval=1, minval=1, maxval=31)
startMonth = input.int(title='Start Month', defval=1, minval=1, maxval=12)
startYear = input.int(title='Start Year', defval=2021, minval=1800, maxval=2100)
EMA_N = input.int(title='EMA period', defval=200, step=5)
ATR_N = input(title='ATR period', defval=14)
ATR_distance = input.float(title='ATR distance multiplier', defval=2.0, step=0.5)
ATR_multiplier_big_candle = input.float(title='ATR multiplier big candle', defval=1.5, step=0.5)
SL_ATR_multiplier = input.float(title='SL ATR multiplier', defval=2, step=0.5)
TP_ATR_multiplier = input.float(title='TP ATR multiplier', defval=2, step=0.5)
MACD_HIST_ABS_CHANGE = input.float(title='MACD Historgram ATR change', defval=0.2, step=0.01)

// Calculate strategy values
EMA = ta.ema(close, EMA_N)
VWAP = ta.vwap(close)
ATR = ta.atr(ATR_N)
MA_volume = ta.sma(volume, 20)
[macdLine, signalLine, histLine] = ta.macd(close, 12, 26, 9)

// Calculate trade conditions
afterStartDate = time >= timestamp(syminfo.timezone, startYear, startMonth, startDate, 0, 0)
aboveEMA = open[0] > EMA[0]
belowEMA = open[0] < EMA[0]
awayFromEMA = math.abs(close[0] - EMA[0]) >= ATR_distance * ATR[0]
candle_perc_high_low_change2 = open[0] < close[0] ? calc_perc_change(high[0], low[0]) : calc_perc_change(low[0], high[0])
bigCandle = math.abs(close[0] - open[0]) >= ATR_multiplier_big_candle * ATR[0] and math.abs(candle_perc_high_low_change2) <= 15
// bigCandle = abs(close[0] - open[0]) >= ATR_multiplier_big_candle*ATR[0]
has_opened_trade = false


if afterStartDate and awayFromEMA and bigCandle
    if aboveEMA
        crossedVWAP = open[0] < VWAP[0] and close[0] > VWAP[0]
        significantATRMACDCHange = histLine > MACD_HIST_ABS_CHANGE * ATR[0]
        if crossedVWAP and significantATRMACDCHange
            //long
            TP = close[0] + TP_ATR_multiplier * ATR[0]
            SL = close[0] - SL_ATR_multiplier * ATR[0]
            strategy.entry('Long trade', strategy.long)
            strategy.exit('TP/SL long', 'Long trade', stop=SL, limit=TP)
            has_opened_trade := true
            has_opened_trade
    if belowEMA
        crossedVWAP = open[0] > VWAP[0] and close[0] < VWAP[0]
        significantATRMACDCHange = histLine < -(MACD_HIST_ABS_CHANGE * ATR[0])
        if crossedVWAP and significantATRMACDCHange
            //short
            TP = close[0] - TP_ATR_multiplier * ATR[0]
            SL = close[0] + SL_ATR_multiplier * ATR[0]
            strategy.entry('Short trade', strategy.short)
            strategy.exit('TP/SL short', 'Short trade', stop=SL, limit=TP)
            has_opened_trade := true
            has_opened_trade


if has_opened_trade
    candle_perc_body_change = calc_perc_change(close[0], close[1])
    candle_perc_high_low_change = candle_perc_body_change > 0 ? calc_perc_change(high[0], low[0]) : calc_perc_change(low[0], high[0])
    ATR_change = candle_perc_body_change > 0 ? (close[0] - open[0]) / ATR[0] : (open[0] - close[0]) / ATR[0]
    away_from_EMA_ATR_dist = open[0] > EMA[0] ? (open[0] - EMA[0]) / ATR[0] : (EMA[0] - open[0]) / ATR[0]
    volume_above_avg_times = volume[0] / MA_volume[0]
    wick_upper_perc = candle_perc_body_change > 0 ? (high[0] - close[0]) / (high[0] - low[0]) * 100 : (high[0] - open[0]) / (high[0] - low[0]) * 100
    wick_lower_perc = candle_perc_body_change > 0 ? (open[0] - low[0]) / (high[0] - low[0]) * 100 : (close[0] - low[0]) / (high[0] - low[0]) * 100
    wick_upper_perc := roundn(wick_upper_perc, 0)
    wick_lower_perc := roundn(wick_lower_perc, 0)

    score = 1.0
    score := volume_above_avg_times >= 2.5 ? score + 0.5 : score
    score := volume_above_avg_times >= 5 ? score + 0.5 : score
    score := math.abs(candle_perc_high_low_change) >= 7.5 ? score - 2 : score
    score := ATR_change <= 3 ? score + 0.5 : score
    score := away_from_EMA_ATR_dist >= 1 ? score + 0.5 : score
    score := candle_perc_body_change > 0 ? wick_upper_perc <= 10 ? score + 0.5 : score : wick_lower_perc <= 10 ? score + 0.5 : score
    score := candle_perc_body_change > 0 ? wick_lower_perc <= 5 ? score + 0.5 : score : wick_upper_perc <= 5 ? score + 0.5 : score

    msg = 'Volume above MA times:       ' + str.tostring(roundn(volume_above_avg_times, 2)) + '\n' + 'Body perc change:                ' + str.tostring(roundn(candle_perc_body_change, 2)) + '\n' + 'Whole candle perc change:    ' + str.tostring(roundn(candle_perc_high_low_change, 2)) + '\n' + 'Body ATR change times:       ' + str.tostring(roundn(ATR_change, 2)) + '\n' + 'Open away from EMA times:   ' + str.tostring(roundn(away_from_EMA_ATR_dist, 2)) + '\n' + 'Upper wick perc:                     ' + str.tostring(wick_upper_perc) + '\n' + 'Lower wick perc:                     ' + str.tostring(wick_lower_perc) + '\n' + 'Histogram:                   ' + str.tostring(roundn(histLine, 2)) + '\n' + 'Prev Histogram:              ' + str.tostring(roundn(histLine[1], 2)) + '\n' + 'Score:       ' + str.tostring(score)

    label.new(bar_index, high * 1.03, msg, color=score >= 3.5 ? color.yellow : color.blue, size=size.small)


// plot(series=ATR, color=color.teal, linewidth=2)
// plot(series=awayFromEMA?1:0, color=color.blue)

